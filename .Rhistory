points(bird_d18o)
plot(precip_d2h[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d2h[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{2}*"H 1"*sigma), side=4, line=3.5))
text(-2.4e6, 4e6, "B", cex=1.5)
plot(precip_d18o[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d18o[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{18}*"O"), side=4, line=3.5))
text(-2.4e6, 4e6, "C", cex=1.5)
plot(precip_d18o[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d18o[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{18}*"O 1"*sigma), side=4, line=3.5))
text(-2.4e6, 4e6, "D", cex=1.5)
plot(plant_d2h[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d2h[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{2}*"H"), side=4, line=3.5))
text(-2.4e6, 4e6, "E", cex=1.5)
plot(plant_d2h[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d2h[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{2}*"H 1"*sigma), side=4, line=3.5))
text(-2.4e6, 4e6, "F", cex=1.5)
plot(plant_d18o[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d18o[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{18}*"O"), side=4, line=3.5))
text(-2.4e6, 4e6, "G", cex=1.5)
plot(plant_d18o[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d18o[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{18}*"O 1"*sigma), side=4, line=3.5))
text(-2.4e6, 4e6, "H", cex=1.5)
dev.off()
png("isoscapes.png", units = "cm", res = 600, width = 20, height = 25)
par(mfrow=c(4,2), mai=c(0,0,0,1))
plot(precip_d2h[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d2h[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{2}*"H"), side=4, line=3.5))
text(-2.4e6, 3.95e6, "A", cex=1.5)
points(bird_d18o)
plot(precip_d2h[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d2h[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{2}*"H 1"*sigma), side=4, line=3.5))
text(-2.4e6, 3.95e6, "B", cex=1.5)
plot(precip_d18o[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d18o[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{18}*"O"), side=4, line=3.5))
text(-2.4e6, 3.95e6, "C", cex=1.5)
plot(precip_d18o[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(precip_d18o[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Precipitation "*delta^{18}*"O 1"*sigma), side=4, line=3.5))
text(-2.4e6, 3.95e6, "D", cex=1.5)
plot(plant_d2h[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d2h[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{2}*"H"), side=4, line=3.5))
text(-2.4e6, 3.95e6, "E", cex=1.5)
plot(plant_d2h[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d2h[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{2}*"H 1"*sigma), side=4, line=3.5))
text(-2.4e6, 3.95e6, "F", cex=1.5)
plot(plant_d18o[[1]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d18o[[1]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{18}*"O"), side=4, line=3.5))
text(-2.4e6, 3.95e6, "G", cex=1.5)
plot(plant_d18o[[2]], axes=FALSE, box=FALSE, xlim=c(-2.5e6, 2.5e6), ylim=c(0,4e6), legend=FALSE)
plot(plant_d18o[[2]], legend.only=TRUE, smallplot=c(0.75,0.77,0.2,0.8),
legend.args=list(text=expression("Plant "*delta^{18}*"O 1"*sigma), side=4, line=3.5))
text(-2.4e6, 3.95e6, "H", cex=1.5)
dev.off()
##My local working directories
setwd("C:/Users/gjbowen/Dropbox/HypoMirror/JPI_marine/code/")
#These are the posterior samples, needed for all of the below
load("post_lear.RData")
#These are the posterior samples, needed for all of the below
load("post_lear.RData")
#These first plots use the Lear data, so prep it using the function from helpers.R
d = prep.lear()
##This is the data on which the original interpretations were based
#Data from Lear et al. 2003 and 2015, 'equlibrium offset' of +0.64 removed from
#2003 d18O data. Data only for core levels w/ both Mg/Ca and d18O. d18O values have
#been averaged for levels with multiple observations
dl = read.csv("Lear_combined_interp.csv")
dl_mgca = dl[order(dl$Age.Ma),]
dl_d18O = dl[!is.na(dl$d18O),]
#Shorthand
sl = post.lear$BUGSoutput$sims.list
su = post.lear$BUGSoutput$summary
#Get some indicies used to parse data in su
sims = nrow(sl$BWT)
BWT.start = match("BWT[1]", row.names(su))
d18O.start = match("d18O_sw[1]", row.names(su))
MgCa.start = match("MgCa_sw_m[1]", row.names(su))
#Data frame holding example parameters and variables
ts.ind = round(runif(1, 1, sims))
age.ind = c(99, 120)
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)])
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Set up plots
setEPS()
postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
axis(1)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21, bg="grey")
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
dev.off()
#Set up plots
setEPS()
postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21, bg="grey")
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
dev.off()
ts.ind = round(runif(1, 1, sims))
age.ind = c(99, 120)
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)])
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Set up plots
#setEPS()
#postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21)
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
dev.off()
dev.off()
ts.ind = round(runif(1, 1, sims))
age.ind = c(99, 120)
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)])
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Set up plots
#setEPS()
#postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21)
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
ts.ind = round(runif(1, 1, sims))
age.ind = c(99, 120)
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)])
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Set up plots
#setEPS()
#postscript("../Figure01b.eps", width = 5, height = 7)
#layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
#       heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21)
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
ts.ind = round(runif(1, 1, sims))
age.ind = c(99, 120)
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)])
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Set up plots
setEPS()
postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21)
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
dev.off()
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = (sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)]) /
(d$ts.ages[age.ind[1]:age.ind[2]] -
d$ts.ages[(age.ind[1]-1):(age.ind[2]-1)]))
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Set up plots
setEPS()
postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21, bg="white")
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
dev.off()
ts.df = data.frame(Age = d$ts.ages[age.ind[1]:age.ind[2]],
BWT = sl$BWT[ts.ind, age.ind[1]:age.ind[2]],
BWT_eps = (sl$BWT[ts.ind, age.ind[1]:age.ind[2]] -
sl$BWT[ts.ind, (age.ind[1]-1):(age.ind[2]-1)]) /
(d$ts.ages[(age.ind[1]-1):(age.ind[2]-1)] -
d$ts.ages[age.ind[1]:age.ind[2]]))
View(ts.df)
#Data frame holding MgCa_sw time series, then match these and extrac to ts.df
MgCa_sw.df = data.frame(Age = d$mgca.ages, MgCa_sw = sl$MgCa_sw_m[ts.ind,])
MgCa_sw.merge = MgCa_sw.df[match(ts.df$Age, MgCa_sw.df$Age), 2]
ts.df = cbind(ts.df, MgCa_sw = MgCa_sw.merge)
#Subset of levels w MgCa proxy obs, where MgCa_f will be simulated
ts.df.sub = ts.df[!is.na(ts.df$MgCa_sw),]
#Apply proxy model equation to forward model foram values
ts.df.sub$MgCa_m = sl$a[ts.ind, 1] + sl$a[ts.ind, 2] * ts.df.sub$BWT * ts.df.sub$MgCa_sw ^ sl$a[ts.ind, 3]
MgCa_sd = sqrt(1/sl$MgCa_calib.pre[ts.ind])
#Set up plots
setEPS()
postscript("../Figure01b.eps", width = 5, height = 7)
layout(matrix(c(1,2,3),1,3), widths = c(lcm(1.5*2.54), lcm(1*2.54), lcm(1.5*2.54)),
heights = c(lcm(16), lcm(16), lcm(16)))
#First panel, epsilon BWT
par(mai=c(0.5,0.5,0,0))
plot(ts.df$BWT_eps, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT_eps, ts.df.sub$Age, pch=21, bg="red")
axis(1)
axis(2)
#Second panel, BWT
par(mai=c(0.5,0,0,0))
plot(ts.df$BWT, ts.df$Age, ylim=c(14, 13.0), pch=21, bg="grey", axes=FALSE)
points(ts.df.sub$BWT, ts.df.sub$Age, pch=21, bg="red")
axis(1)
#Third panel, proxy record
plot(0, 0, xlab="Foraminiferal Mg/Ca", ylab="", xlim=c(1.4,2.6), ylim=c(14, 13.0), axes=FALSE)
axis(1)
for(i in nrow(ts.df.sub):1){
dp = density(rnorm(100000, ts.df.sub$MgCa_m[i], MgCa_sd))
polygon(c(dp$x, dp$x[1]), ts.df.sub$Age[i] - c(dp$y, dp$y[1])/50, col="light grey", lty=0)
lines(dp$x, ts.df.sub$Age[i] - dp$y / 50)
}
points(ts.df.sub$MgCa_m, ts.df.sub$Age, pch=21, bg="white")
points(dl_mgca$MgCa[dl_mgca$Age.Ma>13.1], dl_mgca$Age.Ma[dl_mgca$Age.Ma>13.1], pch=21, bg="red")
dev.off()
##Read proxy data
d = read.csv("birner_2016.csv")
#prep the d18O and MgCa data
d_o = d[!is.na(d$d18O), ]
d_mgca = d[!is.na(d$MgCa),]
#read data
d = read.csv("elderfield_2012.csv")
#subset desired age range
d = d[d$Age_ka > 1235,]
d = d[d$Age_ka < 1320,]
##Read site U1385 data
d.b = read.csv("birner_2016.csv")
##Read site 1123 data and subset for target time interval
d.e = read.csv("elderfield_2012.csv")
d.e = d.e[d.e$Age_ka > 1235,]
d.e = d.e[d.e$Age_ka < 1320,]
##Set up timeseries for d18O_sw and BWT modeling
ts.min = 1320
ts.max = 1235
ts.step = 1
ts.ages = seq(ts.min, ts.max, -ts.step)
#prep the d18O data
d_o.b = d.b[!is.na(d.b$d18O), ]
d_o.e = d.e[!is.na(d.e$d18O), ]
#prep the MgCa data
d_mgca.b = d.b[!is.na(d.b$MgCa),]
d_mgca.e = d.e[!is.na(d.e$MgCa),]
#append proxy record ages and condense
ts.ages = c(ts.ages, d_o.b$Age_ka, d_o.e$Age_ka, d_mgca.b$Age_ka, d_mgca.e$Age_ka)
ts.ages = unique(ts.ages)
ts.ages = sort(ts.ages, decreasing = TRUE)
##Prep the site 1123 data
d = prep.elder()
##Functions for plotting and data prep
source("helpers.R")
##Prepare the site U1385 data
d = prep.birn()
##Parameters to be saved
parameters = c("d18O_sw", "BWT", "BWT.eps.ac", "BWT.pre", "d18O_sw.eps.ac", "d18O_sw.pre",
"a", "MgCa_calib.pre", "b", "d18O_calib.pre")
##Data to pass to the model
dat = list(nages = d$ts.len,
MgCa_calib.bwt.m = d$d_mgca_calib$BWT, MgCa_calib.bwt.sd = d$d_mgca_calib$BWT_sd, MgCa_calib = d$d_mgca_calib$MgCa,
d18O_calib.bwt.m = d$d_d18O_calib$BWT, d18O_calib.bwt.sd = d$d_d18O_calib$BWT_sd, d18O_calib = d$d_d18O_calib$d18O_f.sw,
MgCa_sw.neo = d$mgca_sw_neo,
MgCa.age.ind = d$mgca_age.ind, MgCa = d$d_mgca$MgCa,
d18O.age.ind = d$o_age.ind, d18O = d$d_o$d18O)
t1 = proc.time()
#Some parameters for the sampler
set.seed(t1[3])
n.iter = 50000
n.burnin = 10000
n.thin = floor(n.iter-n.burnin)/5000
#Run it
post.birn = do.call(jags.parallel, list(model.file = "split_temporal_birn.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
#Time taken
proc.time() - t1
##Data to pass to the model
dat = list(nages = d$ts.len, ages = d$ts.ages,
MgCa_calib.bwt.m = d$d_mgca_calib$BWT, MgCa_calib.bwt.sd = d$d_mgca_calib$BWT_sd, MgCa_calib = d$d_mgca_calib$MgCa,
d18O_calib.bwt.m = d$d_d18O_calib$BWT, d18O_calib.bwt.sd = d$d_d18O_calib$BWT_sd, d18O_calib = d$d_d18O_calib$d18O_f.sw,
MgCa_sw.neo = d$mgca_sw_neo,
MgCa.age.ind = d$mgca_age.ind, MgCa = d$d_mgca$MgCa,
d18O.age.ind = d$o_age.ind, d18O = d$d_o$d18O)
##Run the inversion - 50 min for 500k samples
#Start time
t1 = proc.time()
#Some parameters for the sampler
set.seed(t1[3])
n.iter = 50000
n.burnin = 10000
n.thin = floor(n.iter-n.burnin)/5000
#Run it
post.birn = do.call(jags.parallel, list(model.file = "split_temporal_birn.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
t1 = proc.time()
#Some parameters for the sampler
set.seed(t1[3])
n.iter = 500
n.burnin = 100
n.thin = floor(n.iter-n.burnin)/5000
#Run it
post.birn = do.call(jags.parallel, list(model.file = "split_temporal_birn.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
#Time taken
proc.time() - t1
n.thin
t1 = proc.time()
#Some parameters for the sampler
set.seed(t1[3])
n.iter = 500
n.burnin = 100
#n.thin = floor(n.iter-n.burnin)/5000
#Run it
post.birn = do.call(jags.parallel, list(model.file = "split_temporal_birn.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
#Time taken
proc.time() - t1
