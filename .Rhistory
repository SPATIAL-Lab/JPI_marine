dat = sm_forward()
lm(dat$dC ~ T_seass)
case = 4
T_seass = seq(5, 20, length.out = 20)
MAP = rnorm(nsynth, 1200, 100)
MAT = rnorm(nsynth, 20, 1)
P_seas = rnorm(nsynth, 0.25, 0.02)
pCO2 = rnorm(nsynth, 750, 25)
dat = sm_forward()
lm(dat$dC ~ T_seass)
MAP = rnorm(nsynth, 600, 100)
MAT = rnorm(nsynth, 20, 1)
P_seas = rnorm(nsynth, 0.25, 0.02)
pCO2 = rnorm(nsynth, 750, 25)
dat = sm_forward()
lm(dat$dC ~ T_seass)
T_seass = seq(5, 20, length.out = 20)
MAP = rnorm(nsynth, 1000, 100)
MAT = rnorm(nsynth, 20, 1)
P_seas = rnorm(nsynth, 0.25, 0.02)
pCO2 = rnorm(nsynth, 750, 25)
dat = sm_forward()
lm(dat$dC ~ T_seass)
library(RODBC)
channel = odbcConnect("WIDB")
install.packages("RODBC")
library(RODBC)
channel = odbcConnect("WIDB")
sqlQuery(channel, "SHOW TABLES")
sqlQuery(channel, "DESCRIBE Projects")
sqlQuery(channel, "SELECT * FROM Projects WHERE Project_ID = '00166'")
sqlQuery(channel, "UPDATE Projects SET Proprietary = 0 WHERE Project_ID = '00166'")
sqlQuery(channel, "SELECT * FROM Projects WHERE Project_ID = '00166'")
fname = "C:/Users/u0133977/Dropbox/Bowen_Lab/Data_reports/NEON/Shipping/manifest_for_D1120180501164402947.csv"
library(RODBC) #loads required library
library(xlsx) #loads required library
#create channel with filepath to the database
channel = odbcConnect("WIDB")
#read in relevant sheet from NEON spreadsheet
samples <- read.csv(fname, stringsAsFactors = FALSE)
#subset df to include only rows with sample IDs (drops rows with no data)
samples <- samples[!is.na(samples$sampleID),]
#get number of samples
ns = nrow(samples)
#format the shipped date field as a date (required to enter into database)
if(class(samples$dateShipped)=="character"){
samples$dateShipped <- as.Date(samples$dateShipped,"%m/%d/%Y")
}
#format the collection date as a date
if(class(samples$collectdate)=="character"){
samples$collectdate <- as.Date(samples$collectdate,"%Y-%m-%d")
}
#add received date to samples
today = as.Date(date(), "%a %b %d %H:%M:%S %Y")
samples$shipmentReceivedDate = rep(today, ns)
#get and add analyst name and job number
rbname = readline("Your full name: ")
jnum = readline("Job number: ")
#add columns for additional info
trash = rep("N", ns)
samples$sampleReceived = trash
trash = rep("", ns)
samples$acceptedForAnalysis = trash
samples$sampleCondition = trash
samples$unknownSamples = trash
samples$remarks = trash
#set some terms lists and error messages
condlist = c("damaged", "sample incomplete", "handling error", "other")
ynerr = "Bad value, only Y and N allowed\n"
#read in relevant sheet from NEON spreadsheet
samples <- read.csv(fname, stringsAsFactors = FALSE)
#subset df to include only rows with sample IDs (drops rows with no data)
samples <- samples[!is.na(samples$sampleID),]
#get number of samples
ns = nrow(samples)
#format the shipped date field as a date (required to enter into database)
if(class(samples$dateShipped)=="character"){
samples$dateShipped <- as.Date(samples$dateShipped,"%m/%d/%Y")
}
#read in relevant sheet from NEON spreadsheet
samples <- read.csv(fname, stringsAsFactors = FALSE)
#subset df to include only rows with sample IDs (drops rows with no data)
samples <- samples[!is.na(samples$sampleID),]
#get number of samples
ns = nrow(samples)
?grep
yst = grep("201", samples$dateShipped[1])
yst
yst = gregexpr("201", samples$dateShipped[1])
gregexpr("201", samples$dateShipped[1])
yst[1]
yst[1][1]
yst[1,1]
yst[[1]]
yst[[1]][1]
switch
switch?
yst = gregexpr("201", samples$dateShipped[1])
if yst<2{ dform = "%Y-%m-%d" } else {
dform = "%m/%d/%Y"
}
if(yst<2){ dform = "%Y-%m-%d" } else {
dform = "%m/%d/%Y"
}
samples$dateShipped <- as.Date(samples$dateShipped,"%m/%d/%Y")
#read in relevant sheet from NEON spreadsheet
samples <- read.csv(fname, stringsAsFactors = FALSE)
#subset df to include only rows with sample IDs (drops rows with no data)
samples <- samples[!is.na(samples$sampleID),]
#get number of samples
ns = nrow(samples)
#format the shipped date field as a date (required to enter into database)
if(class(samples$dateShipped)=="character"){
yst = gregexpr("201", samples$dateShipped[1])
if(yst<2){ dform = "%Y-%m-%d" } else {
dform = "%m/%d/%Y"
}
samples$dateShipped <- as.Date(samples$dateShipped, dform)
}
#format the collection date as a date
if(class(samples$collectdate)=="character"){
yst = gregexpr("201", samples$dateShipped[1])
if(yst<2){ dform = "%Y-%m-%d" } else {
dform = "%m/%d/%Y"
}
samples$collectdate <- as.Date(samples$collectdate, dform)
}
#add received date to samples
today = as.Date(date(), "%a %b %d %H:%M:%S %Y")
samples$shipmentReceivedDate = rep(today, ns)
#get and add analyst name and job number
rbname = readline("Your full name: ")
samples$receivedBy = rep(rbname, ns)
jnum = readline("Job number: ")
samples$jobNumber = rep(jnum, ns)
#add columns for additional info
trash = rep("N", ns)
samples$sampleReceived = trash
trash = rep("", ns)
samples$acceptedForAnalysis = trash
samples$sampleCondition = trash
samples$unknownSamples = trash
samples$remarks = trash
#set some terms lists and error messages
condlist = c("damaged", "sample incomplete", "handling error", "other")
ynerr = "Bad value, only Y and N allowed\n"
#Input any unknown sample IDs - need confirmation on this
tok = "a"
i=1
cat("\n")
while(tok != ""){
tok = readline("Enter Sample IDs for unknown samples, return for done: ")
if(tok != "a" && tok != ""){
samples[ns+i,] = NA
samples$shipmentID[ns+i] = samples$shipmentID[ns]
samples$sampleClass[ns+i] = samples$sampleClass[ns]
samples$sampleID[ns+i] = tok
samples$unknownSamples[ns+i] = tok
i = i+1
}
}
View(samples)
for(i in 1:ncol(samples)){for(j in 1:nrow(samples)){if(samples[j,i]==NA)samples[j,i]=""}}
for(i in 1:ncol(samples)){for(j in 1:nrow(samples)){if(samples[j,i]==NA)samples[j,i]=NULL}}
for(i in 1:ncol(samples)){for(j in 1:nrow(samples)){if(samples[j,i]==NA){samples[j,i]=NULL}}}
for(i in 1:ncol(samples)){for(j in 1:nrow(samples)){if(samples[j,i]=="NA"){samples[j,i]=NULL}}}
j = 13
i = 1
if(samples[j,i]=="NA"){samples[j,i]=NULL}
if(is.na(samples[j,i])){samples[j,i]=NULL}
if(is.na(samples[j,i])){samples[j,i]=""}
for(i in 1:ncol(samples)){
for(j in 1:nrow(samples)){
if(is.na(samples[j,i])){samples[j,i]=""}
}
}
#Write receipt form
receipt = data.frame("shipmentID" = samples$shipmentID,
"shipmentReceivedDate" = samples$shipmentReceivedDate,
"receivedBy" = samples$receivedBy,
"sampleID" = samples$sampleID,
"sampleCode"=rep("", nrow(samples)),
"sampleClass" = samples$sampleClass,
"sampleReceived" = samples$sampleReceived,
"acceptedForAnalysis" = samples$acceptedForAnalysis,
"sampleCondition" = samples$sampleCondition,
"unknownSamples" = samples$unknownSamples,
"remarks" = samples$remarks)
fname = paste0("Bowen_Lab/Data_reports/NEON/Shipping/receipt_form_", receipt$shipmentID[1], ".csv")
write.csv(receipt, fname, row.names = FALSE, na = "")
sqlQuery(channel, "DESCRIBE NEON_shipping")
sqlQuery(channel, "DESCRIBE NEON_shipping")
sqlQuery(channel, "DESCRIBE NEON_shipping")
#create channel with filepath to the database
channel = odbcConnect("WIDB")
sqlQuery(channel, "DESCRIBE NEON_shipping")
install.packages("raster")
install.packages("sp")
install.packages("rgdal")
install.packages("ggplot2")
install.packages("devtools")
devtools::install_github("SPATIAL-Lab/isorig", force =T)# install isOrigin package from Github
library(RODBC)
channel = odbcConnect("WIDB")
sqlQuery(channel, "COUNT d2H FROM Water_Isotope_Data")
sqlQuery(channel, "SELECT COUNT(d2H) FROM Water_Isotope_Data")
sqlQuery(channel, "SELECT COUNT(d18O) FROM Water_Isotope_Data")
sqlQuery(channel, "SELECT COUNT(d18O) FROM Water_Isotope_Data WHERE WI_Analysis_Ignore = 0")
sqlQuery(channel, "SELECT COUNT(Sample_ID) FROM Samples")
channel = odbcConnect("WIDB")
sqlQuery(channel, "SELECT COUNT(Sample_ID) FROM Samples")
library(devtools)
devtools::install_github("SPATIAL-Lab/isorig", force=T)
data("naMap")
library(isOrigin)
data("naMap")
data("d2h_world")
d = subOrigData(taxon = c("Homo sapiens"), mask = naMap)
sumary(d)
summary(d)
r = calRaster(dd, d2h_world, naMap)
r = calRaster(d, d2h_world, naMap)
d = d[d$d2H < -75]
d = d[d$d2H < -75,]
r = calRaster(d, d2h_world, naMap)
id = c("A", "B", "C", "D")
d2H = c(-110, -105, -100, -120)
un = data.frame(id,d2H)
asn = pdRaster(r$isoscape.rescale,unknown=un,mask=naMap)
p1 <- c(-100,45,-100,50,-110,50,-110,45,-100,45)
p1 <- matrix(p1, 5,2, byrow = T)
p1 <- Polygon(p1)
p1 <- Polygons(list(p1), "p1")
p2 <- c(-100,40,-100,45,-110,45,-110,40,-100,40)
p2 <- matrix(p2, 5,2, byrow = T)
p2 <- Polygon(p2)
p2 <- Polygons(list(p2), "p2")
p12 <- SpatialPolygons(list(p1,p2),1:2)
pp1 <- c(-100,45)
pp2 <- c(-100,60)
pp12 <- as.data.frame(rbind(pp1,pp2))
fname = "C:/Users/u0133977/Dropbox/Bowen_Lab/Sample_metadata/test"
library(readxl)
library(RODBC)
channel = odbcConnect("WIDB")
Sys.setenv(TZ= "GMT")
if(fname == ""){
projectFile = "Projects.csv"
siteFile = "Sites.csv"
samplesFile = "Samples.csv"
csvImport = 1
} else {
csvImport = 0
}
#####Figure out what needs to be imported
SitesYN = T
SamplesYN = T
ProjectsYN = T
AnalysisYN = T
ClimateYN = T
tmpdat = read_excel(fname, sheet="Samples", col_names = TRUE,
col_types = c("text", "text", "text", "text", "guess",
"numeric", "guess", "numeric", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "text"))
fname = "C:/Users/u0133977/Dropbox/Bowen_Lab/Sample_metadata/test/test.xlsx"
tmpdat = read_excel(fname, sheet="Samples", col_names = TRUE,
col_types = c("text", "text", "text", "text", "guess",
"numeric", "guess", "numeric", "numeric",
"text", "text", "numeric", "text",
"numeric", "text", "text"))
oddsRatio(asn, p12)
oddsRatio(asn, pp12)
qtlRaster(asn, threshold = 0.7, thresholdType = 1)
qtlRaster(asn, threshold = 0.7, thresholdType = 2)
jointP(asn)
unionP(asn)
install.packages(c("cli", "coda", "digest", "doParallel", "dplyr", "e1071", "expm", "GGally", "glue", "iterators", "maptools", "mcmcplots", "mime", "munsell", "mvtnorm", "openssl", "pillar", "pkgconfig", "progress", "purrr", "R6", "rbacon", "Rcpp", "rjags", "rlang", "rstudioapi", "scales", "spData", "stringi", "stringr", "tidyr", "tidyselect", "utf8"))
install.packages(c("cli", "coda", "digest", "doParallel", "dplyr", "e1071", "expm", "GGally", "glue", "iterators", "maptools", "mcmcplots", "mime", "munsell", "mvtnorm", "openssl", "pillar", "pkgconfig", "progress", "purrr", "R6", "rbacon", "Rcpp", "rjags", "rlang", "rstudioapi", "scales", "spData", "stringi", "stringr", "tidyr", "tidyselect", "utf8"))
install.packages(c("cli", "coda", "digest", "doParallel", "dplyr", "e1071", "expm", "GGally", "glue", "iterators", "maptools", "mcmcplots", "mime", "munsell", "mvtnorm", "openssl", "pillar", "pkgconfig", "progress", "purrr", "R6", "rbacon", "Rcpp", "rjags", "rlang", "rstudioapi", "scales", "spData", "stringi", "stringr", "tidyr", "tidyselect", "utf8"))
library(RODBC)
channel = odbcConnect("WIDB")
d=sqlQuery(channel, "SELECT * FROM Samples WHERE Project_ID = '00099'")
dd = sqlQuery(channel, "SELECT * FROM Samples WHERE Sample_ID LIKE '%GJBMISC18%'")
View(dd)
View(d)
load("post_lear.RData")
library(R2OpenBUGS)
library(coda)
library(rjags)
library(R2jags)
library(xlsx)
setwd("C:/Users/gjbowen/Dropbox/HypoMirror/JPI_marine/")
##Load libraries
library(rjags)
library(R2jags)
library(xlsx)
setwd("C:/Users/u0133977/Dropbox/HypoMirror/JPI_marine/code/")
##Functions for plotting and data prep
source("helpers.R")
d = prep.birn()
##Parameters to be saved
parameters = c("d18O_sw", "BWT", "BWT.eps.ac", "BWT.pre", "d18O_sw.eps.ac", "d18O_sw.pre",
"a", "MgCa_calib.pre", "b", "d18O_calib.pre")
##Data to pass to the model
dat = list(nages = d$ts.len,
MgCa_calib.bwt.m = d$d_mgca_calib$BWT, MgCa_calib.bwt.sd = d$d_mgca_calib$BWT_sd, MgCa_calib = d$d_mgca_calib$MgCa,
d18O_calib.bwt.m = d$d_d18O_calib$BWT, d18O_calib.bwt.sd = d$d_d18O_calib$BWT_sd, d18O_calib = d$d_d18O_calib$d18O_f.sw,
MgCa_sw.neo = d$mgca_sw_neo,
MgCa.age.ind = d$mgca_age.ind, MgCa = d$d_mgca$MgCa,
d18O.age.ind = d$o_age.ind, d18O = d$d_o$d18O)
##Run the inversion - 50 min for 500k samples
t1 = proc.time()
set.seed(t1[3])
n.iter = 500000
n.burnin = 10000
n.thin = floor(n.iter-n.burnin)/5000
post.birn = do.call(jags.parallel, list(model.file = "split_temporal_birn.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
proc.time() - t1
save(post.birn, file = "post_birn.RData")
#####
##Now the Elderfield record site 1123
#####
d = prep.elder()
##Parameters to be saved
parameters = c("d18O_sw", "BWT", "BWT.eps.ac", "BWT.pre", "d18O_sw.eps.ac", "d18O_sw.pre",
"a", "MgCa_calib.pre", "b", "d18O_calib.pre")
##Data to pass to the model
dat = list(nages = d$ts.len,
MgCa_calib.bwt.m = d$d_mgca_calib$BWT, MgCa_calib.bwt.sd = d$d_mgca_calib$BWT_sd, MgCa_calib = d$d_mgca_calib$MgCa,
d18O_calib.bwt.m = d$d_d18O_calib$BWT, d18O_calib.bwt.sd = d$d_d18O_calib$BWT_sd, d18O_calib = d$d_d18O_calib$d18O_f.sw,
MgCa_sw.neo = d$mgca_sw_neo,
MgCa.age.ind = d$mgca_age.ind, MgCa = d$d_mgca$MgCa,
d18O.age.ind = d$o_age.ind, d18O = d$d_o$d18O)
##Run the inversion - 50 min for 500k samples
t1 = proc.time()
set.seed(t1[3])
n.iter = 500000
n.burnin = 10000
n.thin = floor(n.iter-n.burnin)/5000
post.elder = do.call(jags.parallel, list(model.file = "split_temporal_elder.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
proc.time() - t1
save(post.elder, file = "post_elder.RData")
#####
##Now Shackelton site and 1123 together
#####
d = prep.multi()
##Parameters to be saved
parameters = c("d18O_sw.b", "BWT.b", "d18O_sw.e", "BWT.e",
"BWT.b.eps.ac", "BWT.b.pre", "d18O_sw.b.eps.ac", "d18O_sw.b.pre",
"BWT.e.eps.ac", "BWT.e.pre", "d18O_sw.e.eps.ac", "d18O_sw.e.pre",
"a", "MgCa_calib.pre", "b.c", "b.u", "d18O_calib.c.pre", "d18O_calib.u.pre")
##Data to pass to the model
dat = list(nages = d$ts.len,
MgCa_calib.bwt.m = d$d_mgca_calib$BWT, MgCa_calib.bwt.sd = d$d_mgca_calib$BWT_sd, MgCa_calib = d$d_mgca_calib$MgCa,
d18O_calib.u.bwt.m = d$d_d18O_calib.u$BWT, d18O_calib.u.bwt.sd = d$d_d18O_calib.u$BWT_sd, d18O_calib.u = d$d_d18O_calib.u$d18O_f.sw,
d18O_calib.c.bwt.m = d$d_d18O_calib.c$BWT, d18O_calib.c.bwt.sd = d$d_d18O_calib.c$BWT_sd, d18O_calib.c = d$d_d18O_calib.c$d18O_f.sw,
MgCa_sw.neo = d$mgca_sw_neo,
MgCa.age.ind.b = d$mgca_age.ind.b, MgCa.b = d$d_mgca.b$MgCa,
d18O.age.ind.b = d$o_age.ind.b, d18O.b = d$d_o.b$d18O,
MgCa.age.ind.e = d$mgca_age.ind.e, MgCa.e = d$d_mgca.e$MgCa,
d18O.age.ind.e = d$o_age.ind.e, d18O.e = d$d_o.e$d18O)
##Run the inversion ~ 1 hour for 100k sims
t1 = proc.time()
set.seed(t1[3])
n.iter = 750000
n.burnin = 10000
n.thin = floor((n.iter - n.burnin) / 5000)
post.multi = do.call(jags.parallel, list(model.file = "split_temporal_multi.R", parameters.to.save = parameters,
data = dat, n.chains=3, n.iter = n.iter,
n.burnin = n.burnin, n.thin = n.thin))
proc.time() - t1
save(post.multi, file="post_multi.RData")
View(post.elder$BUGSoutput$summary)
View(post.birn$BUGSoutput$summary)
View(post.multi$BUGSoutput$summary)
mgca_uvi = "model {
#Data model for downcore MgCa_calib constraint
LGM[1] ~ dnorm(D_MgCa_LGM.m, MgCa_calib.pre / 2)
LGM[2] ~ dnorm(D_d18O_LGM.m, d18O_calib.pre / 2)
D_MgCa_LGM.m = (a[1] + a[2] * BWT_LGM) * MgCa_sw_LGM ^ a[3] - (a[1] + a[2] * BWT_HOL) * MgCa_sw_HOL ^ a[3]
D_d18O_LGM.m = D_d18O_sw_LGM + (b[1] + b[2] * BWT_LGM + b[3] * BWT_LGM ^ 2) - (b[1] + b[2] * BWT_HOL + b[3] * BWT_HOL ^ 2)
D_d18O_sw_LGM ~ dnorm(1.1, 1 / 0.1 ^ 2) #Estimate from Adkins et al 2002
#hold seawater composition fixed to limit assocaited variance
MgCa_sw_LGM = 5.2
MgCa_sw_HOL = 5.2
BWT_LGM = BWT_HOL + D_BWT_LGM
D_BWT_LGM ~ dunif(-5, 0)
BWT_HOL ~ dnorm(3.7, 1 / 0.2 ^ 2) #Estimated from Elderfield et al 2010, fig 6
#Priors on MgCa_calib data model parameters
#Precision based on Uvigerina coretop variance
MgCa_calib.pre ~ dgamma(MgCa_calib.pre.shp, MgCa_calib.pre.rate)
MgCa_calib.pre.shp = 2
MgCa_calib.pre.rate = 1/30
#Using very loose constraints on MgCa calib parameters, holding a[3] fixed
a[1] ~ dunif(0.6, 1.4)
a[2] ~ dunif(0.04, 0.15)
a[3] = -0.02
#Data model for d18O_calib observations
for(i in 1:length(d18O_calib)){
d18O_calib[i] ~ dnorm(d18O_calib.m[i], d18O_calib.pre)
d18O_calib.m[i] = b[1] + b[2] * d18O_calib.bwt[i] + b[3] * d18O_calib.bwt[i] ^ 2
d18O_calib.bwt[i] ~ dnorm(d18O_calib.bwt.m[i], 1 / d18O_calib.bwt.sd[i])
}
# Priors on d18O data model parameters
d18O_calib.pre ~ dgamma(d18O_calib.pre.shp, d18O_calib.pre.rate)
d18O_calib.pre.shp = 3
d18O_calib.pre.rate = 1/30
b[1] ~ dnorm(b.1.m, 1 / b.1.var)
b[2] ~ dnorm(b.2.m, 1 / b.2.var)
b[3] ~ dnorm(b.3.m, 1 / b.3.var)
b.1.m = 4.25
b.1.var = 0.06 ^ 2
b.2.m = -0.215
b.2.var = 0.02 ^ 2
b.3.m = -0.001
b.3.var = 0.001 ^ 2
}
"
#####
#libraries
library(R2OpenBUGS)
library(coda)
library(rjags)
library(R2jags)
setwd("C:/Users/u0133977/Dropbox/Hypomirror/JPI_marine/code/")
d = read.csv("U_d18O_calib.csv")
d = d[is.na(d$Ignore),]
#Setup
parameters = c("a", "MgCa_calib.pre", "b", "d18O_calib.pre"," D_d18O_sw_LGM",
"D_BWT_LGM", "BWT_HOL")
rdat = list(d18O_calib.bwt.m = d$BWT, d18O_calib.bwt.sd = d$BWT_sd, d18O_calib = d$d18O_f.sw, LGM = c(-0.24, 1.7))
#Run it
set.seed(proc.time()[3])
rmod <- jags(model.file = textConnection(mgca_uvi), parameters.to.save = parameters,
data = rdat, inits = NULL,
n.chains=3, n.iter = 50000, n.burnin = 500, n.thin = 10)
source("helpers.R")
plotd(runif(100000, -5, 0), ylim=c(0,1), xlab = "LGM temp change") #prior
lined(rmod$BUGSoutput$sims.list$D_BWT_LGM, col="red") #posterior
#This plot shows the lack of constraint on slope of MgCa calib
plotd(runif(100000, 0.04, 0.15), ylim=c(0,15), xlab = "Uvi. Mg/Ca T sensitivity") #prior
lined(rmod$BUGSoutput$sims.list$a[,2], col="red") #posterior
#This plot shows how d18O calcite constains LGM temp change
plotd(runif(100000, -5, 0), ylim=c(0,0.6), xlab = "LGM temp change") #prior
lined(rmod$BUGSoutput$sims.list$D_BWT_LGM, col="red") #posterior
#This plot shows how d18O calcite constains LGM temp change
plotd(runif(100000, -5, 0), ylim=c(0,0.5), xlab = "LGM temp change") #prior
lined(rmod$BUGSoutput$sims.list$D_BWT_LGM, col="red") #posterior
#This plot shows the lack of constraint on slope of MgCa calib
plotd(runif(100000, 0.04, 0.15), ylim=c(0,15), xlab = "Uvi. Mg/Ca T sensitivity") #prior
lined(rmod$BUGSoutput$sims.list$a[,2], col="red") #posterior
#This plot shows the lack of constraint on slope of MgCa calib
plotd(runif(100000, 0.04, 0.15), ylim=c(0,11), xlab = "Uvi. Mg/Ca T sensitivity") #prior
lined(rmod$BUGSoutput$sims.list$a[,2], col="red") #posterior
plotd(rgamma(100000, 2, 1/30))
plotd(1/rgamma(100000, 2, 1/30))
mean(1/rgamma(100000, 2, 1/30))
sqrt(0.033)
mgca_uvi = "model {
#Data model for downcore MgCa_calib constraint
LGM[1] ~ dnorm(D_MgCa_LGM.m, MgCa_calib.pre / 2)
LGM[2] ~ dnorm(D_d18O_LGM.m, d18O_calib.pre / 2)
D_MgCa_LGM.m = (a[1] + a[2] * BWT_LGM) * MgCa_sw_LGM ^ a[3] - (a[1] + a[2] * BWT_HOL) * MgCa_sw_HOL ^ a[3]
D_d18O_LGM.m = D_d18O_sw_LGM + (b[1] + b[2] * BWT_LGM + b[3] * BWT_LGM ^ 2) - (b[1] + b[2] * BWT_HOL + b[3] * BWT_HOL ^ 2)
D_d18O_sw_LGM ~ dnorm(1.1, 1 / 0.1 ^ 2) #Estimate from Adkins et al 2002
#hold seawater composition fixed to limit assocaited variance
MgCa_sw_LGM = 5.2
MgCa_sw_HOL = 5.2
BWT_LGM = BWT_HOL + D_BWT_LGM
D_BWT_LGM ~ dunif(-5, 0)
BWT_HOL ~ dnorm(3.7, 1 / 0.2 ^ 2) #Estimated from Elderfield et al 2010, fig 6
#Priors on MgCa_calib data model parameters
#Precision based on Uvigerina coretop variance
MgCa_calib.pre ~ dgamma(MgCa_calib.pre.shp, MgCa_calib.pre.rate)
MgCa_calib.pre.shp = 2
MgCa_calib.pre.rate = 1/30
#Using very loose constraints on MgCa calib parameters, holding a[3] fixed
a[1] ~ dunif(0.6, 1.4)
a[2] ~ dunif(-0.05, 0.35)
a[3] = -0.02
#Data model for d18O_calib observations
for(i in 1:length(d18O_calib)){
d18O_calib[i] ~ dnorm(d18O_calib.m[i], d18O_calib.pre)
d18O_calib.m[i] = b[1] + b[2] * d18O_calib.bwt[i] + b[3] * d18O_calib.bwt[i] ^ 2
d18O_calib.bwt[i] ~ dnorm(d18O_calib.bwt.m[i], 1 / d18O_calib.bwt.sd[i])
}
# Priors on d18O data model parameters
d18O_calib.pre ~ dgamma(d18O_calib.pre.shp, d18O_calib.pre.rate)
d18O_calib.pre.shp = 3
d18O_calib.pre.rate = 1/30
b[1] ~ dnorm(b.1.m, 1 / b.1.var)
b[2] ~ dnorm(b.2.m, 1 / b.2.var)
b[3] ~ dnorm(b.3.m, 1 / b.3.var)
b.1.m = 4.25
b.1.var = 0.06 ^ 2
b.2.m = -0.215
b.2.var = 0.02 ^ 2
b.3.m = -0.001
b.3.var = 0.001 ^ 2
}
"
rmod <- jags(model.file = textConnection(mgca_uvi), parameters.to.save = parameters,
data = rdat, inits = NULL,
n.chains=3, n.iter = 50000, n.burnin = 500, n.thin = 10)
#This plot shows the lack of constraint on slope of MgCa calib
plotd(runif(100000, -0.05, 0.35), ylim=c(0,11), xlab = "Uvi. Mg/Ca T sensitivity") #prior
lined(rmod$BUGSoutput$sims.list$a[,2], col="red") #posterior
