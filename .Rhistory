sqlQuery(channel, "UPDATE Sites SET Country = '' WHERE Country = ' '")
sqlQuery(channel, "SELECT Site_ID FROM Sites WHERE Country = ' '")
sqlQuery(channel, "UPDATE Sites SET Country = '' WHERE Country = ' '")
sqlQuery(channel, "UPDATE Sites SET Country = NULL WHERE Country = ' '")
install.packages(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("SPATIAL-Lab/isorig", force=TRUE)
?Bacon
library(rbacon)
?Bacon
?rbacon
library(devtools)
devtools::install_github("SPATIAL-Lab/isorig", force=T)
library(isOrigin)
d = subOrigData(taxon = "Homo sapiens")
plot(d$Latitude, d$d2H)
data("naMap")
data("d2H_world")
data("d2h_world")
d = subOrigData(taxon = "Homo sapiens", mask = naMap)
plot(d$Latitude, d$d2H)
d = d[d$Latitude < 50,]
plot(d$Latitude, d$d2H)
r = calRaster(d, d2h_world, mask = naMap)
getwd()
id = c("a", "b", "c", "d")
d2h = c(-110, -105, -90, -102)
dd = data.frame(id, d2h)
asn = pdRaster(r$isoscape.rescale$mean,r$isoscape.rescale$sd,unknown=dd,mask=naMap)
p1 <- c(-100,60,-100,65,-110,65,-110,60,-100,60)
p1 <- matrix(p1, 5,2, byrow = T)
p1 <- Polygon(p1)
p1 <- Polygons(list(p1), "p1")
p2 <- c(-100,40,-100,45,-110,45,-110,40,-100,40)
p2 <- matrix(p2, 5,2, byrow = T)
p2 <- Polygon(p2)
p2 <- Polygons(list(p2), "p2")
p12 <- SpatialPolygons(list(p1,p2),1:2)
lines(p12)
polygon(p12)
polygon(p1)
oddsRatio(asn, p12)
qtlRaster(asn, 0.75, thresholdType = 1)
qtlRaster(asn, 0.75, thresholdType = 2)
multRaster(asn)
unionP(asn)
ddd = multRaster(asn)
?SpatialPoints
pts = SpatialPoints(data.frame("Lat"=c(45,55),"Lon"=c(-80,-110)))
plot(pts)
ddd = multRaster(asn)
points(pts)
pts = SpatialPoints(data.frame("Lon"=c(-80,-110), "Lat"=c(45,55)))
points(pts)
oddsRatio(ddd,pts)
pts = data.frame("Lon"=c(-80,-110), "Lat"=c(45,55))
oddsRatio(ddd,pts)
devtools::install_github("SPATIAL-Lab/isorig", force=T)
oddsRatio(ddd,pts)
pts = SpatialPoints(data.frame("Lon"=c(-80,-110), "Lat"=c(45,55)))
oddsRatio(ddd,pts)
unionP(asn)
jointP
jointP(asn)
oddsRatio(asn, p12)
data(isOrigin)
library(isOrigin)
oddsRatio(asn, p12)
library(isOrigin)
data("naMap")
data("d2hworld")
data("d2h_world")
d = subOrigData(taxon = c("Homo sapiens"), mask = naMap)
r = calRaster(dd, d2h_world, mask = naMap)
r = calRaster(d, d2h_world, mask = naMap)
id = c("A", "B", "C", "D")
v = c(-110, -120, -122, -100)
dd = data.frame(id, v)
asn = pdRaster(r, unknown = dd, mask = naMap)
pdRaster
summary(r)
asn = pdRaster(r$isoscape.rescale, unknown = dd, mask = naMap)
jointP(asn)
unionP(asn)
lons = c(-80, -110)
lats = c(40,55)
ll = matrix(c(lons, lats), nrow = 2, ncol = 2, byrow = FALSE)
ll
pts = SpatialPoints(ll)
points(pts)
oddsRatio(asn, pts)
s = oddsRatio(asn, pts)
summary(s)
s=jointP(asn)
qtlRaster(asn, 0.7, 2)
qtlRaster(asn, 0.7, 1)
d
dd
dd = data.frame(id=seq(1,100,1), v=rep(-100,100))
pdRaster(r$isoscape.rescale, dd, mask = naMap)
?pdRaster
pdRaster(r$isoscape.rescale, dd, mask = naMap, genplot = FALSE)
asn = pdRaster(r$isoscape.rescale, dd, mask = naMap, genplot = FALSE)
qtlRaster(asn, 0.7, 1)
unionP(asn)
1500 * 1.6^2
1500 / 1.6^2
library(RODBC)
channel = odbcConnect("WIDB")
sqlQuery(channel, "SELECT * FROM Sites WHERE Site_Name = 'PORTOROZ'")
sqlQuery(channel, "UPDATE Sites SET Latitude=45.475376 WHERE Site_Name = 'PORTOROZ'")
sqlQuery(channel, "UPDATE Sites SET Longitude=13.616026 WHERE Site_Name = 'PORTOROZ'")
sqlQuery(channel, "UPDATE Sites SET Site_Comments='coordinates updated 10/5/18, pers comm, P. Vreca' WHERE Site_Name = 'PORTOROZ'")
sqlQuery(channel, "SELECT * FROM Projects")
close(channel)
library("isOrigin", lib.loc="~/R/win-library/3.4")
remove.packages("isOrigin", lib="~/R/win-library/3.4")
devtools::install_github("SPATIAL-lab/isorig", force =T)
devtools::install_github("SPATIAL-lab/isorig", force =T)
devtools::install_github("SPATIAL-lab/isorig", force =T)
library(isOrigin)
data("naMap")
data("d2h_world")
d = subOrigData(taxon = c("Homo sapiens"), mask = naMap)
d = subOrigData(taxon = c("Homo sapiens"))
d = subOrigData(taxon = c("Homo sapiens"), mask = naMap)
r = calRaster(known = d, isoscape = d2h_world, mask = naMap)
devtools::install_github("SPATIAL-lab/isorig", force =T)
data("naMap")
library(isOrigin)
data("naMap")
data("d2h_world")
d = subOrigData(taxon = c("Homo sapiens"), mask = naMap)
12500*1.525
nr = read.csv("C:/Users/gjbowen/Desktop/receipt_form_D1820181008100705069.csv")
View(nr)
summary(nr)
types(nr)
type(nr)
sd = as.Date(nr$shipmentReceivedDate)
?as.Date
sd = as.Date(nr$shipmentReceivedDate, format = "%M/%D/%Y")
sd = as.Date(nr$shipmentReceivedDate, format = "%m/%D/%Y")
sd
sd = as.Date(nr$shipmentReceivedDate, format = "%m/%d/%Y")
nr$shipmentReceivedDate = sd
write.csv("C:/Users/gjbowen/Desktop/receipt_form_D1820181008100705069B.csv")
write.csv(nr, "C:/Users/gjbowen/Desktop/receipt_form_D1820181008100705069B.csv")
write.csv(nr, "C:/Users/gjbowen/Desktop/receipt_form_D1820181008100705069.csv", row.names = FALSE)
library(R2OpenBUGS)
library(coda)
library(rjags)
library(R2jags)
library(xlsx)
?jags
jags
?adapt
library(R2OpenBUGS)
library(coda)
library(rjags)
library(R2jags)
library(xlsx)
setwd("C:/Users/u0133977/Dropbox/HypoMirror/JPI_marine/")
setwd("C:/Users/u0133977/Dropbox/HypoMirror/JPI_marine/")
plot(-11.8, -105, xlim = c(-20,-10), ylim=c(-180,-100))
abline(8,10)
abline(10.8)
abline(10,8)
plot(-11.8, -105, xlim = c(-20,-11), ylim=c(-160,-100))
abline(10,8)
points(c(-15.5, -17.2), c(-15.5*8+10, -17.2*8+10), pch=21)
points(c(-15.5, -17.2), c(-15.5*8+10, -17.2*8+10), pch=21, bg="black")
plot(-11.8, -105, xlim = c(-18,-11), ylim=c(-140,-100))
abline(10,8)
points(c(-15.5, -17.2), c(-15.5*8+10, -17.2*8+10), pch=21, bg="black")
lines(c(-11.8, -18.8), c(-105, -105-4.5*7))
library(RODBC)
channel = odbcConnect("WIDB")
sqlQuery(channel, "SELECT * FROM Projects WHERE Project_ID = '00164'")
sqlQuery(channel, "UPDATE Projects SET Proprietary = 0 WHERE Project_ID = '00164'")
sqlQuery(channel, "SELECT * FROM Projects WHERE Project_ID = '00164'")
sqrt(1000)
0.4*30
library(RODBC)
channel = odbcConnect("WIDB")
qrys = sqlQuery(channel, "SELECT MONTH(Time), COUNT(ID) FROM Tracking_log GROUP BY MONTH(Time)")
qrys = sqlQuery(channel, "SELECT MONTH(Time), YEAR(Time), COUNT(ID) FROM Tracking_log GROUP BY MONTH(Time) AND YEAR(Time)")
qrys = sqlQuery(channel, "SELECT MONTH(Time), YEAR(Time), COUNT(ID) FROM Tracking_log GROUP BY MONTH(Time), YEAR(Time)")
View(qrys)
qrys = qrys[qrys$`YEAR(Time)` = 2018,]
qrys = qrys[qrys$`YEAR(Time)` == 2018,]
qrys$Month = c("Jan18", "Feb18", "Mar18", "Apr18", "May18", "Jun18", "Jul18", "Aug18", "Sep18", "Oct18", "Nov18", "Dec18")
mean(qrys$`COUNT(ID)`)
library(RODBC)
odc = odbcConnect("ITCE")
sqlQuery(odc, "DESCRIBE Applications")
sqlQuery(odc, "SHOW TABLES")
sqlQuery(odc, "DESCRIBE application")
students = sqlQuery(odc, "SELECT * FROM application WHERE CYear = '2018'")
applied = sqlQuery(odc, "SELECT *.people,  *.application
FROM application INNER JOIN people ON
Person_ID.people =  Person_ID.application
WHERE CYear.application = '2018'")
applied = sqlQuery(odc, "SELECT people.*,  application.*
FROM application INNER JOIN people ON
people.Person_ID =  application.Person_ID
WHERE application.CYear = '2018'")
View(applied)
enrl = sqlQuery(odc, "SELECT Enrolled FROM application")
sqlQuery(odc, "UPDATE application SET Enrolled = 'Yes' WHERE Enrolled = 'Yes '")
enrl = c("Yes", "", "Yes", "Yes", "Yes", "", "Yes", "Yes", "", "Yes", "Yes", "Yes", "", "Yes", "Yes", "Yes", "Yes", "Yes", "Yes", "Yes", "Yes", "", "Yes", "", "Yes", "Yes", "", "Yes")
enrl.df = data.frame(applied$Person_ID, enrl)
enrl.df$enrl = as.character(enrl.df$enrl)
for(i in 1:nrow(enrl.df)){
sqlQuery(odc, paste0("UPDATE application SET Enrolled = '", enrl.df$enrl[i], "' WHERE
Person_ID = '", enrl.df$Person_ID, "'"))
}
applied = sqlQuery(odc, "SELECT people.*,  application.*
FROM application INNER JOIN people ON
people.Person_ID =  application.Person_ID
WHERE application.CYear = '2018'")
i=1
paste0("UPDATE application SET Enrolled = '", enrl.df$enrl[i], "' WHERE
Person_ID = '", enrl.df$Person_ID[i], "'")
paste0("UPDATE application SET Enrolled = '", enrl.df$enrl[i], "' WHERE
Person_ID = '", enrl.df$applied.Person_ID[i], "'")
for(i in 1:nrow(enrl.df)){
sqlQuery(odc, paste0("UPDATE application SET Enrolled = '", enrl.df$enrl[i], "' WHERE
Person_ID = '", enrl.df$applied.Person_ID[i], "'"))
}
applied = sqlQuery(odc, "SELECT people.*,  application.*
FROM application INNER JOIN people ON
people.Person_ID =  application.Person_ID
WHERE application.CYear = '2018'")
enrolled = sqlQuery(odc, "SELECT people.*,  application.*
FROM application INNER JOIN people ON
people.Person_ID =  application.Person_ID
WHERE application.CYear = '2018'
AND application.Enrolled = 'Yes'")
View(enrolled)
15/21
10/21
close(odc)
odc = odbcConnect("WIDB")
sqlQuery(odc, "SHOW TABLES")
sqlQuery(odc, "DESCRIBE Tracking_log")
sqlQuery(odc, "SELECT * FROM Tracking_log")
dat = sqlQuery(odc, "SELECT * FROM Tracking_log")
data = dat[dat$Time > '02/01/2018']
data = dat[dat$Time > '02/01/2018',]
View(dat)
data = dat[dat$Time > '2018-02-01',]
data = dat[dat$Time < '2018-09-30',]
sqlQuery(odc, "SELECT COUNT(Sample_ID) FROM Water_Isotope_Data")
sqlQuery(odc, "SELECT COUNT(Sample_ID) FROM Water_Isotope_Data")
odc = odbcConnect("WIDB")
sqlQuery(odc, "SELECT COUNT(Sample_ID) FROM Water_Isotope_Data")
close(odc)
odc = odbcConnect("ITCE")
applied = sqlQuery(odc, "SELECT people.*,  application.*
FROM application INNER JOIN people ON
people.Person_ID =  application.Person_ID
WHERE application.CYear = '2018'")
applied = sqlQuery(odc, "SELECT people.*,  application.*
FROM application INNER JOIN people ON
people.Person_ID =  application.Person_ID
WHERE application.CYear = '2019'")
View(applied)
View(applied)
write.csv(applied, "C:/Users/gjbowen/Desktop/applied.csv")
170*0.7
h = 120/18
h*2
h = h*2
h * 0.0002
h = h * 0.0002
h*16
28*8
=224/2
224/2
112/18
h = 112/18
h = h*2
h
h = h * 0.0002
h
h*1000
library(devtools)
install_github("SPATIAL-LAB/isorig")
install.packages("raster")
install.packages("raster")
install.packages("raster")
detach(raster, unload = TRUE)
detach("package:raster", unload = TRUE)
detach("package:sp", unload = TRUE)
library("abind", lib.loc="~/R/win-library/3.4")
detach("package:abind", unload=TRUE)
update.packages()
install.packages("backports")
library(devtools)
install_github("SPATIAL-LAB/isorig")
devtools::install_github(“SPATIAL-Lab/isorig”, force=T)
install_github(“SPATIAL-Lab/isorig”, force=T)
install_github("SPATIAL-LAB/isorig", force=TRUE)
detach("package:raster", unload=TRUE)
remove.packages("raster")
install.packages("raster")
install.packages("raster")
library(devtools)
install_github("SPATIAL-LAB/isorig", force = TRUE)
library(isOrigin)
?isOrigin
subOrigData
600/96
library(RODBC)
channel = odbcConnect("WIDB")
allus = sqlQuery(channel, "SELECT COUNT(Samples.Sample_ID) FROM Samples INNER JOIN Sites ON Samples.Site_ID = Sites.Site_ID WHERE Sites.Country = 'US'")
allus
gwus = sqlQuery(channel, "SELECT COUNT(Samples.Sample_ID) FROM Samples INNER JOIN Sites ON Samples.Site_ID = Sites.Site_ID WHERE Sites.Country = 'US' AND Samples.Project_ID = '00210'")
allgwus = sqlQuery(channel, "SELECT COUNT(Samples.Sample_ID) FROM Samples INNER JOIN Sites ON Samples.Site_ID = Sites.Site_ID WHERE Sites.Country = 'US' AND Samples.Type = 'Ground'")
gwus / allgwus
allgwus = sqlQuery(channel, "SELECT COUNT(Samples.Sample_ID) FROM Samples INNER JOIN Sites ON Samples.Site_ID = Sites.Site_ID WHERE Sites.Country = 'US' AND (Samples.Type = 'Ground' OR Samples.Type = 'Spring')")
gwus / allgwus
gwus / allus
allworld = sqlQuery(channel, "SELECT COUNT(Samples.Sample_ID) FROM Samples")
allworld
gwus / allworld
?isOrigin
library(isOrigin)
?isOrigin
libra
library(RODBC)
channel = odbcConnect("WIDB")
sqlQuery(channel, "DESCRIBE People")
sqlQuery(channel, "SHOW TABLES")
close(channel)
channel = odbcConnect("ITCE")
sqlQuery(channel, "DESCRIBE People")
sqlQuery(channel, "SHOW TABLES")
sqlQuery(channel, "DESCRIBE people")
sqlQuery(channel, "SELECT * FROM people WHERE Last_Name = 'Bowen'")
sqlQuery(channel, "UPDATE People INSERT UNID='u6024188', First_Name='Alexis', Last_Name='Sims', Institution_Name='UU', Email='alexi.sims@utah.edu', Reviewer='both'")
sqlQuery(channel, "INSERT INTO people(UNID,First_Name,Last_Name,Institution_Name,Email,Reviewer) VALUES('u6024188','Alexis','Sims','UU','alexis.sims@utah.edu','both')")
sqlQuery(channel, "SELECT * FROM people WHERE Last_Name = 'Sims'")
sqlQuery(channel, "UPDATE people SET Student_Or_Instructor = 'i' WHERE Last_Name = 'Sims'")
library(RODBC)
channel = odbcConnect("WIDB")
dat = sqlQuery(channel, "SELECT * FROM Samples_test")
View(dat)
sqlQuery(channel, "DESCRIBE Projects")
pl = sqlQuery(channel, "SELECT Project_ID FROM Projects")
pl
sqlQuery(channel, "DESCRIBE Projects")
sqlQuery(channel, "INSERT INTO Projects(Project_ID,Contact_Name,Contact_Email,Citation,URL,Project_Name,Proprietary" VALUES('00211','National Ecological Observatory Network', '', 'National Ecological Observatory Network. 2019 and after. Provisional data downloaded from http://data.neonscience.org. Battelle, Boulder, CO, USA', 'https://www.neonscience.org/data','NEON',0)")
sqlQuery(channel, "INSERT INTO Projects(Project_ID,Contact_Name,Contact_Email,Citation,URL,Project_Name,Proprietary) VALUES('00211','National Ecological Observatory Network', '', 'National Ecological Observatory Network. 2019 and after. Provisional data downloaded from http://data.neonscience.org. Battelle, Boulder, CO, USA', 'https://www.neonscience.org/data','NEON',0)")
pl = sqlQuery(channel, "SELECT * FROM Projects")
View(pl)
dat = sqlQuery(channel, "SELECT * FROM Samples_test INNER JOIN Water_Isotope_Data ON Samples_test.Sample_ID = Water_Isotope_Data.Sample_ID")
View(dat)
dat1 = sqlQuery(channel, "SELECT * FROM Samples_test")
dat2 = sqlQuery(chanel, "SELECT * FROM Sites_test")
dat2 = sqlQuery(channel, "SELECT * FROM Sites_test")
View(dat2)
dat1 = sqlQuery(channel, "SELECT * FROM Samples_test INNER JOIN Sites_test ON Samples_test.Site_ID = Sites_test.Site.ID")
dat
dat``
dat1
dat1 = sqlQuery(channel, "SELECT * FROM Samples_test INNER JOIN Sites_test ON Samples_test.Site_ID = Sites_test.Site_ID")
View(dat1)
qrys = sqlQuery(channel, "SELECT MONTH(Time), COUNT(ID) FROM Tracking_log GROUP BY MONTH(Time)")
mean(qrys$`COUNT(ID)`)
View(qrys)
qrys = sqlQuery(channel, "SELECT YEAR_MONTH(Time), COUNT(ID) FROM Tracking_log GROUP BY MONTH(Time)")
qrys = sqlQuery(channel, "SELECT YEAR_MONTH(Time), COUNT(ID) FROM Tracking_log GROUP BY YEAR_MONTH(Time)")
qrys = sqlQuery(channel, "SELECT EXTRACT(YEAR_MONTH FROM Time), COUNT(ID) FROM Tracking_log GROUP BY EXTRACT(YEAR_MONTH FROM Time)")
mean(qrys$`COUNT(ID)`)
barplot(qrys$`COUNT(ID)`, xlab="Month", ylab="Count", col="red")
barplot(qrys$`COUNT(ID), names.arg=qrys$`EXTRACT(YEAR_MONTH FROM Time)`, xlab="Month", ylab="Count", col="red")
names(qrys) = c("Month", "Count")
barplot(qrys$Count, names.arg=qrys$Month, xlab="Month", ylab="Count", col="red")
mean(qrys$Count)
df.bar = barplot(qrys$Count, names.arg=qrys$Month, xlab="Month", ylab="Count", col="red")
df.bar = barplot(qrys$Count, names.arg=qrys$Month, xlab="Month", ylab="Count", col="red")
lines(df.bar, rep(mean(qrys$Count), nrow(df.bar)))
lines(df.bar, rep(mean(qrys$Count), nrow(df.bar)), lty=3)
df.bar = barplot(qrys$Count, names.arg=qrys$Month, xlab="Month", ylab="Count", col="red")
lines(df.bar, rep(mean(qrys$Count), nrow(df.bar)), lty=3)
qrys = sqlQuery(channel, "SELECT * FROM Tracking_log")
View(qrys)
write.csv(qrys, "C:/Users/gjbowen/Desktop/widb.csv")
library(RODBC)
channel = odbcConnect("WIDB")
dat = sqlQuery(channel, "SELECT * FROM Samples WHERE Sample_ID LIKE 'SPATIAL_19%'")
View(dat)
dat1 = sqlQuery(channel, "SELECT Samples.*, Sites.* FROM Samples INNER JOIN Sites ON Samples.Site_ID = Sites.Site_ID WHERE Samples.Sample_ID LIKE 'SPATIAL_19%'")
View(dat1)
dat2 = sqlQuery(channel, "SELECT Samples.*, Water_Isotope_Data.* FROM Samples INNER JOIN Water_Isotope_Data ON Samples.Sample_ID = Water_Isotope_Data.Sample_ID WHERE Samples.Sample_ID LIKE 'SPATIAL_19%'")
View(dat2)
library(mvtnorm)
library(MCMCpack)
#takes values of H and O isotope composition, SD of each, and covariance
iso = function(H,O,Hsd,Osd,HOc){
return(data.frame(H=H, O=O, Hsd=Hsd, Osd=Osd, HOc=HOc))
}
hyp = iso(-100, -11, 5, 0.5, 0.6)
obs = iso(-110, -12, 1, 0.1, 0.1)
val = rmvnorm(1000, c(obs$H, obs$O), matrix(c(obs$Hsd^2, rep(obs$HOc*obs$Hsd*obs$Osd, 2), obs$Osd^2),2,2))
View(val)
obs_prob = dmvnorm(c(hyp$H, hyp$O),c(obs$H, obs$O), sigma=matrix(c(obs$Hsd^2, rep(obs$HOc*obs$Hsd*obs$Osd,2), obs$Osd^2),2,2))
?dmvnorm
for(i in 1:1000){
obs_prob[i] = dmvnorm(c(hyp$H, hyp$O),c(obs$H, obs$O), sigma=matrix(c(obs$Hsd^2, rep(obs$HOc*obs$Hsd*obs$Osd,2), obs$Osd^2),2,2))
}
obs_prob[i] = dmvnorm(c(hyp$H, hyp$O),c(val[i,1], val[i,2]), sigma=matrix(c(obs$Hsd^2, rep(obs$HOc*obs$Hsd*obs$Osd,2), obs$Osd^2),2,2))
for(i in 1:1000){
obs_prob[i] = dmvnorm(c(hyp$H, hyp$O),c(val[i,1], val[i,2]), sigma=matrix(c(obs$Hsd^2, rep(obs$HOc*obs$Hsd*obs$Osd,2), obs$Osd^2),2,2))
}
#Functions for plotting and data prep, also used throughout
source("helpers.R")
#These first plots use the Lear data, so prep it using the function from helpers.R
d = prep.lear()
##My local working directories
setwd("C:/Users/gjbowen/Dropbox/HypoMirror/JPI_marine/code/")
#These are the posterior samples, needed for all of the below
load("post_lear.RData")
load("post_multi.RData")
load("post_birn.RData")
load("post_elder.RData")
#These first plots use the Lear data, so prep it using the function from helpers.R
d = prep.lear()
##This is the data on which the original interpretations were based
#Data from Lear et al. 2003 and 2015, 'equlibrium offset' of +0.64 removed from
#2003 d18O data. Data only for core levels w/ both Mg/Ca and d18O. d18O values have
#been averaged for levels with multiple observations
dl = read.csv("Lear_combined_interp.csv")
dl_mgca = dl[order(dl$Age.Ma),]
dl_d18O = dl[!is.na(dl$d18O),]
#Shorthand
sl = post.lear$BUGSoutput$sims.list
su = post.lear$BUGSoutput$summary
#Get some indicies used to parse data in su
sims = nrow(sl$BWT)
BWT.start = match("BWT[1]", row.names(su))
d18O.start = match("d18O_sw[1]", row.names(su))
MgCa.start = match("MgCa_sw_m[1]", row.names(su))
#These first plots use the Lear data, so prep it using the function from helpers.R
d = prep.lear()
#Functions for plotting and data prep, also used throughout
source("helpers.R")
#These first plots use the Lear data, so prep it using the function from helpers.R
d = prep.lear()
#Functions for plotting and data prep, also used throughout
source("helpers.R")
#These first plots use the Lear data, so prep it using the function from helpers.R
d = prep.lear()
#Get index values for base time series
ts.ind = match(d$, d$ts.ages)
#Get index values for base time series
ts.ind = match(d$mgca.ts.ages.base, d$mgca.ages)
#Get index values for base time series
ts.ind = match(d$mgca.ts.ages.base, d$mgca.ages)
#Make space and layout
png("../Figure02.png", units="in", width=5, height=2.75, res=600)
par(mar=c(4,4,1,1), cex=0.85)
##Panel setup
plot(-10, 0, xlab="Age (Ma)", ylab ="Seawater Mg/Ca", xlim=c(0,80), ylim=c(0.8,5.5))
#Plot 2500 representative JPI posterior samples
for(i in seq(1, sims, by = max(floor(sims / 2500),1))){
lines(d$mgca.ages[ts.ind], sl$MgCa_sw_m[i,ts.ind], col = rgb(0,0,0, 0.01))
}
#curve fit from L15 for comparison
ages = seq(0, 55, 1)
vals = 5.2 - 0.238 * ages + 0.00661 * ages^2 - 6.66e-5 * ages^3
lines(ages, vals, col=rgb(0.2,0.4,1))
#Add JPI median and 95% CIs
lines(d$mgca.ages[ts.ind], su[MgCa.start + ts.ind, 5], col="red")
lines(d$mgca.ages[ts.ind], su[MgCa.start + ts.ind, 3], col="red", lty=3)
lines(d$mgca.ages[ts.ind], su[MgCa.start + ts.ind, 7], col="red", lty=3)
#Points showing Mg/Ca proxy obs and distribution of proxy and calib data
points(d$d_mgca_sw$Age, d$d_mgca_sw$MgCa, pch=21, bg = "white")
points(d$d_mgca$Age.Ma, rep(0.8, nrow(d$d_mgca)), pch=21, bg = "black")
calib_ages = d$d_mgca_calib$Age
calib_ages = calib_ages[calib_ages>0]
points(calib_ages, rep(0.8, length(calib_ages)), pch=21, bg = "grey")
dev.off()
#Get index values for base time series
ts.ind = match(d$mgca.ts.ages.base, d$mgca.ages)
#Make space and layout
png("../Figure02.png", units="in", width=5, height=2.75, res=600)
par(mar=c(4,4,1,1), cex=0.85)
##Panel setup
plot(-10, 0, xlab="Age (Ma)", ylab ="Seawater Mg/Ca", xlim=c(0,80), ylim=c(0.8,5.5))
#Plot 2500 representative JPI posterior samples
for(i in seq(1, sims, by = max(floor(sims / 2500),1))){
lines(d$mgca.ages[ts.ind], sl$MgCa_sw_m[i,ts.ind], col = rgb(0,0,0, 0.01))
}
#curve fit from L15 for comparison
ages = seq(0, 55, 1)
vals = 5.2 - 0.238 * ages + 0.00661 * ages^2 - 6.66e-5 * ages^3
lines(ages, vals, col=rgb(0.2,0.4,1))
#Add JPI median and 95% CIs
lines(d$mgca.ages[ts.ind], su[MgCa.start + ts.ind - 1, 5], col="red")
lines(d$mgca.ages[ts.ind], su[MgCa.start + ts.ind - 1, 3], col="red", lty=3)
lines(d$mgca.ages[ts.ind], su[MgCa.start + ts.ind - 1, 7], col="red", lty=3)
#Points showing Mg/Ca proxy obs and distribution of proxy and calib data
points(d$d_mgca_sw$Age, d$d_mgca_sw$MgCa, pch=21, bg = "white")
points(d$d_mgca$Age.Ma, rep(0.8, nrow(d$d_mgca)), pch=21, bg = "black")
calib_ages = d$d_mgca_calib$Age
calib_ages = calib_ages[calib_ages>0]
points(calib_ages, rep(0.8, length(calib_ages)), pch=21, bg = "grey")
dev.off()
